- move CameraForMapping in mapper
- cv::Mat pointer in image.h
- synchronize better threads
- better class distribution
- check well TODO (camera.cpp)
- multiscale searching
- regions separate
- TODO remove (dtam.cpp)

- return on rotational invariance
      updateRotationalInvariantGradients in dtam.cpp
      updateRotationalInvariantGradients in mapper.cpp
      float cost = getCostNew in epline.cpp (to rob)

- return on frame selection for initialization (large baseline/score ?)
- return on homography/fundamentalmat on initialization

- consider curvature

- invdepth or depth?

- consider linear interpolation instead of nn

- implement tracking as dso, but try to choose better coarser resolutions later

- add magnitude of d_right - d_left

- return real variance TODO (camera.h)

- regions projected candidates -> vector projected candidates ?

- warp function for tracking can be optimized (tracking may be faster)

- start working on bundle adjustment


TODO
in tracker
mark active points which are no more observed during tracking
NEW MEMBER OF ACTIVE POINT: bool point not observed in last frame

in keyframe handler
if keyframe is added:
  margnalize keyframe: add flag to keyframe
  NEW MEMBER OF CAMERA -> bool camera has to be marginalized
  marginalize all points of that camera
  NEW MEMBER OF ACTIVE POINT: bool to be marginalized,
  increase counter of number of marginalized points

  check not observed marks -> set counter
  NEW MEMBER OF ACTIVE POINT: int number of consecutive keyframes for which the point is not observed
  if the counter == 2,
  increase counter of number of marginalized points and mark the active point


IN ORDER
-propagate uncertainty in the right way!! (seems done)
-think way for activating points in a sparse way (seems done)
- tracking with active points

bundleadj.cpp


in bundle adj
after SIGNAL (after tracked candidates)..
1) activate new candidates: consider the number of marginalized points
2) START BUNDLE ADJUSTMENT! by considering active points and cameras with marginalize flag



- good json for blender
